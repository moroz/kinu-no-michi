// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: carts.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const insertCart = `-- name: InsertCart :exec
insert into carts (id) values ($1)
`

func (q *Queries) InsertCart(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, insertCart, id)
	return err
}

const insertCartItem = `-- name: InsertCartItem :one
insert into cart_items as ci (id, cart_id, product_id, quantity)
values ($1, $2, $3, $4)
on conflict (cart_id, product_id) do update
set quantity = ci.quantity + excluded.quantity,
updated_at = now() at time zone 'utc'
returning id, cart_id, product_id, quantity, inserted_at, updated_at
`

type InsertCartItemParams struct {
	ID        uuid.UUID
	CartID    uuid.UUID
	ProductID uuid.UUID
	Quantity  decimal.Decimal
}

func (q *Queries) InsertCartItem(ctx context.Context, arg InsertCartItemParams) (*CartItem, error) {
	row := q.db.QueryRow(ctx, insertCartItem,
		arg.ID,
		arg.CartID,
		arg.ProductID,
		arg.Quantity,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
